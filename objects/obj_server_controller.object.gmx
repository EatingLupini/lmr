<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SERVER SETUP
port = get_integer("Scegli una porta: ", -1);
if(port != -1)
{
    net_server = network_create_server( network_socket_tcp , port , 1 );
    send_buffer = buffer_create( 128 , buffer_fixed , 1 );
    socket_list = ds_list_create();
}
else
{
    room_goto(room0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INVIA DATI
if(ds_list_size(socket_list) &gt; 0 and instance_exists(obj_player))
{
    buffer_seek( send_buffer , buffer_seek_start , 0 );
    buffer_write( send_buffer , buffer_u8 , 1 ); //msgid
    buffer_write( send_buffer , buffer_s16 , obj_player.x );
    buffer_write( send_buffer , buffer_s16 , obj_player.y );
    buffer_write( send_buffer , buffer_s16 , obj_player.z );
    buffer_write( send_buffer , buffer_s16 , obj_player.direction );
    
    var socket = socket_list[| 0];
    network_send_packet( socket , send_buffer , buffer_tell( send_buffer ) );
    
    //show_debug_message("server invio dati: nulla");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NETWORKING

//SERVER
var type_event = ds_map_find_value( async_load , "type" );
switch( type_event ) {
    case network_type_connect:
        var socket = ds_map_find_value( async_load , "socket" );
        ds_list_add( socket_list , socket );
        instance_create(obj_spawn.x, obj_spawn.y, obj_other_player);
    break;
    case network_type_disconnect:
        var socket = ds_map_find_value( async_load , "socket" );
        var findsocket = ds_list_find_index( socket_list , socket );
      
        if ( findsocket &gt;= 0 ) {
            ds_list_delete( socket_list , findsocket );
        }
        with(obj_other_player) instance_destroy();
    break;
    case network_type_data:
        //spacchetto i dati
        var buffer = ds_map_find_value( async_load , "buffer" );
        var socket = ds_map_find_value( async_load , "id" );
        buffer_seek( buffer , buffer_seek_start , 0 );
      
        var msgid = buffer_read( buffer , buffer_u8 );

        show_debug_message("server ricezione dati: " + string(msgid));
        
        switch( msgid ) {
            case 1:
                if(instance_exists(obj_other_player))
                {
                    var ics = buffer_read( buffer , buffer_s16 );
                    var ips = buffer_read( buffer , buffer_s16 );
                    var zet = buffer_read( buffer , buffer_s16 );
                    var dir = buffer_read( buffer , buffer_s16 );
                    
                    /*show_debug_message("x: " + string(ics));
                    show_debug_message("y: " + string(ips));
                    show_debug_message("z: " + string(zet));
                    show_debug_message("d: " + string(dir));*/
                    
                    obj_other_player.x = ics;
                    obj_other_player.y = ips;
                    obj_other_player.z = zet;
                    obj_other_player.direction = dir;
                }
            break;
        }
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG
//draw connection
draw_set_color(c_black);

if(global.server == 1)
    draw_text(16, display_get_gui_height() -16, "N. Clients: " + string(ds_list_size(socket_list)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
