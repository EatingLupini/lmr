<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CLIENT SETUP
//lista giocatori
mynid = -1;  //verrà modificato appena il server risponde
grid_players = ds_grid_create(7, 1); //socket/netid/x/y/z/dir/zdir

//creo il giocatore e lo aggiungo alla lista
var ii = instance_create(obj_spawn.x, obj_spawn.y, obj_player);
ii.z = 80;
ds_grid_set_row_pl(grid_players, 0, -1, -1, -1, -1, -1, -1, -1);

theip = "-1";
theip = get_string("Inserisci l'indirizzo IP del server: ", "-1");
if(theip != "-1")
{
    port = -1;
    port = get_integer("Scegli una porta: ", -1);
    if(port != -1)
    {
        socket = network_create_socket( network_socket_tcp );
        isConnected = network_connect( socket , theip , port ); //127.0.0.1 - (port: 63258)
        send_buffer = buffer_create( 128 , buffer_fixed , 1 );
        result = 0;
        fully_connected = false;
    }
    else
    {
        room_goto(room0);
    }
}
else
{
    room_goto(room0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UPDATE GRID
var netidrow = ds_grid_find_by_col(grid_players, 1, mynid);
ds_grid_set_row_pl(grid_players, netidrow, noone, noone,
                    obj_player.x, obj_player.y, obj_player.z,
                    obj_player.direction, obj_player.zdirection);

/*grid_players[# 2,netidrow] = obj_player.x;
grid_players[# 3,netidrow] = obj_player.y;
grid_players[# 4,netidrow] = obj_player.z;
grid_players[# 5,netidrow] = obj_player.direction;
grid_players[# 6,netidrow] = obj_player.zdirection;*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INVIA DATI

if(fully_connected)
{
    var temp_buff = buffer_create(128, buffer_fixed, 1);
    buffer_seek( temp_buff , buffer_seek_start , 0 );
    buffer_write( temp_buff , buffer_u8 , 1 ); //msgid
    buffer_write( temp_buff , buffer_u8 , mynid );
    buffer_write( temp_buff , buffer_s16 , obj_player.x );
    buffer_write( temp_buff , buffer_s16 , obj_player.y );
    buffer_write( temp_buff , buffer_s16 , obj_player.z );
    buffer_write( temp_buff , buffer_s16 , obj_player.direction );
    buffer_write( temp_buff , buffer_s16 , obj_player.zdirection );
    
    result = network_send_packet( socket , temp_buff , buffer_tell( temp_buff ) );
    
    buffer_delete(temp_buff);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UPDATE PLAYERS
for(var i=0; i&lt;instance_number(obj_other_player); i++)
{
    var ii = instance_find(obj_other_player, i);
    var netidrow = ds_grid_find_by_col(grid_players, 1, ii.netid);
    ii.x = grid_players[# 2,netidrow];
    ii.y = grid_players[# 3,netidrow];
    ii.z = grid_players[# 4,netidrow];
    ii.direction = grid_players[# 5,netidrow];
    ii.zdirection = grid_players[# 6,netidrow];
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NETWORKING

///CLIENT
var type_event = ds_map_find_value( async_load , "type" );
switch( type_event ) {
    case network_type_data:
        //spacchetto i dati
        var buffer = ds_map_find_value( async_load , "buffer" );
        buffer_seek( buffer , buffer_seek_start , 0 );
      
        var msgid = buffer_read( buffer , buffer_u8 );

        //show_debug_message("client ricezione dati: " + string(msgid));

        switch( msgid )
        {
            case 2:
                if(fully_connected)
                {
                    var grid_string = buffer_read( buffer , buffer_string );
                    ds_grid_read(grid_players, grid_string);
                    
                    //creo vecchi giocatori non ancora spawnati
                    for(var i=0; i&lt;ds_grid_height(grid_players); i++)
                    {
                        var cnid = grid_players[# 1,i];
                        if(cnid != mynid)
                        {
                            //scorro tutti i giocatori presenti ed eventualmente creare giocatori
                            found = false;
                            for(var j=0; j&lt;instance_number(obj_other_player); j++)
                            {
                                var jj = instance_find(obj_other_player, j);
                                if(jj.netid == cnid)
                                    found = true;
                            }
                            if(!found)
                            {
                                var ii = instance_create(obj_spawn.x, obj_spawn.y, obj_other_player);
                                ii.z = 80;
                                ii.netid = cnid;
                            }
                        }
                    }
                }
                break;
            
            case 10:
                var nid = buffer_read(buffer, buffer_u8);
                var grid_string = buffer_read(buffer, buffer_string);
                ds_grid_read(grid_players, grid_string);
                if(!fully_connected)    //se true significa che il netid specifico è di un nuovo client connesso
                {
                    mynid = nid;
                    fully_connected = true;
                    
                    //creo il player del server
                    var ii = instance_create(obj_spawn.x, obj_spawn.y, obj_other_player);
                    ii.z = 80;
                    ii.netid = 0;   //netid del server è sempre 0
                }
                break;
            case 11:
                var nid = buffer_read(buffer, buffer_u8);
                var grid_string = buffer_read(buffer, buffer_string);
                ds_grid_read(grid_players, grid_string);
                
                //elimino il giocatore disconnesso
                for(var i=0; i&lt;instance_number(obj_other_player); i++)
                {
                    var oopid = instance_find(obj_other_player, i);
                    if(oopid.netid == nid)
                    {
                        with(oopid) instance_destroy();
                        break;
                    }
                }
                break;
        }
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG
//draw connection
draw_set_color(c_black);

draw_text(16, display_get_gui_height() -32, "n obj other player: " + string(instance_number(obj_other_player)));
draw_text(16, display_get_gui_height() -16, "Connected: " + string(result &gt;= 0) + string(" - " + string(fully_connected)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
