<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mask_wall1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///VARIABILI
//menu
cur_pos = -1; 
editing = "null";

//variabili menu
screen_x_start = 256;
screen_y_start = 256;

//transizioni
open_menu_w_start = 256;
open_menu_w_end = display_get_gui_width() -32; //va aggiornato in step
open_menu_w_inc = 64;
open_menu_w = 256; //il valore di partenza è 256

//entry text
entry_text[0] = "Trova Partita";
entry_text[1] = "Ospita Partita";
entry_text[2] = "Allenamento"
entry_text[3] = "Opzioni"
entry_text[4] = "Crediti"
entry_text[5] = "Esci"

//trova partita text
find_text[0] = "Nome";
find_text[1] = "Password";
find_text[2] = "Modalita'";
find_text[3] = "Giocatori";

//default
connect_ip = "127.0.0.1";
connect_port = "12345";
server_name = string(global.nickname) + "'s room";
server_pass = "";
server_numpl = 4;
server_mode = 0;
server_track = 0;
server_port = "12345";
server_lan = false;

//modalità
modes[0] = "Run";
modes[1] = "LMR";

//mappe (0 = prima modalità; 1 = seconda modalità)
tracks[0,0] = "Temple";
//tracks[0,1] = "Krakatoa";
tracks[1,0] = "Robeh1";
tracks[1,1] = "Robeh2";
tracks[1,2] = "Robeh3";

//credits
credits_text = 
"Last Man Running

PROGRAMMAZIONE
Davide Modenese

GRAFICA
Internet

MUSICA &amp; SUONI
Non ci sono

BETA TESTER
Emanuele Balloni
e alcuni salami di gmi
";

alarm[0] = room_speed/2;
cursor = "_";

//variabili comune
xoffset = 32;
yoffset = display_get_gui_height() - array_length_1d(entry_text)*32 -64;
mx = 0;
my = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CURSORE LAMPEGGIANTE
if(cursor == "_")
    cursor = "";
else
    cursor = "_";

alarm[0] = room_speed/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AZIONI
var action = -1;
mx = mouse_x;
my = mouse_y;
open_menu_w_end = display_get_gui_width() -32;

for(var i=0; i&lt;array_length_1d(entry_text); i++)
{
    //draw entry rect
    if(mx &gt;= 0 and mx &lt; 256 and my &gt;= yoffset +32*i and my &lt; yoffset +32*(i+1))
        action = i;
}

//apri/chiudi schermata
if(mouse_check_button_pressed(mb_left))
{
    //se premo nella finestra aperta la finestra non viene chiusa
    if(cur_pos != -1 and mx &gt;= 256 and mx &lt; display_get_gui_width() -32 and my &gt;= 256 and my &lt; display_get_gui_height() -32)
    {
    }
    else
    {
        //setto cur_pos in base ad action ovvero dove ho cliccato
        if(cur_pos == action)
        {
            cur_pos = -1;
        }
        else
        {
            cur_pos = action;
            open_menu_w = open_menu_w_start;
        }
        
        //elimino gli oggetti delle schermate
        with(obj_menu_item) instance_destroy();
    }
    
    //se è stato premuto allenamento
    if(action == 2)
        room_goto(rm_run_map1);
    
    //se è stato premuto esci
    if(action == array_length_1d(entry_text)-1)
        game_end();
}

//incrementa valori transizione
if(open_menu_w +open_menu_w_inc &lt;= open_menu_w_end)
    open_menu_w += open_menu_w_inc;
else
    open_menu_w = open_menu_w_end;


//confermo testo inserito
if((keyboard_check_pressed(vk_enter) or mouse_check_button_pressed(mb_left)) and editing != "null")
{
    editing = "null";
}

//schermate
switch(cur_pos)
{
    //trova partita
    case 0:
        
        break;
    //ospita partita
    case 1:
        //solo se finita la transizione disegna il resto
        if(open_menu_w == open_menu_w_end)
        {
            //numero giocatori
            var yoff = 256;
            if(!place_meeting(screen_x_start +64, screen_y_start +yoff, obj_left))
            {
                var ii = instance_create(screen_x_start +64, screen_y_start +yoff, obj_left);
                ii.what = "left_numpl";
            }
            if(!place_meeting(screen_x_start +224, screen_y_start +yoff, obj_right))
            {
                var ii = instance_create(screen_x_start +224, screen_y_start +yoff, obj_right);
                ii.what = "right_numpl";
            }
            
            //modalità
            var yoff = 64;
            var xcenter = open_menu_w_start + (open_menu_w_end - open_menu_w_start)/2;
            if(!place_meeting(xcenter -128, screen_y_start +yoff, obj_left))
            {
                var ii = instance_create(xcenter -128, screen_y_start +yoff, obj_left);
                ii.what = "left_mode";
            }
            if(!place_meeting(xcenter +96, screen_y_start +yoff, obj_right))
            {
                var ii = instance_create(xcenter +96, screen_y_start +yoff, obj_right);
                ii.what = "right_mode";
            }
            //percorso
            var yoff = 448;
            if(!place_meeting(xcenter -128, screen_y_start +yoff, obj_left))
            {
                var ii = instance_create(xcenter -128, screen_y_start +yoff, obj_left);
                ii.what = "left_track";
            }
            if(!place_meeting(xcenter +96, screen_y_start +yoff, obj_right))
            {
                var ii = instance_create(xcenter +96, screen_y_start +yoff, obj_right);
                ii.what = "right_track";
            }
            //LAN
            var yoff = 160;
            var xcenter = open_menu_w_end -32 -128;
            if(!place_meeting(xcenter -16, screen_y_start +yoff, obj_checkbox))
            {
                var ii = instance_create(xcenter -16, screen_y_start +yoff, obj_checkbox);
                ii.what = "checkbox_lan";
            }
        }
        
        break;
}

//Modifica Testi e Pressione Tasti
if(mouse_check_button_pressed(mb_left) and editing == "null")
{
    switch(cur_pos)
    {
        //trova partita
        case 0:
            //solo se finita la transizione
            if(open_menu_w == open_menu_w_end)
            {
                //indirizzo ip
                var yoff = display_get_gui_height() -128;
                if(mx &gt;= screen_x_start +32 and mx &lt; screen_x_start +32 +256 and my &gt;= yoff +64 and my &lt; yoff +96)
                {
                    keyboard_string = connect_ip;
                    editing = "connect_ip";
                }
                //porta
                var xoff = screen_x_start +32 +256 +128;//string_length(str_ip)*16;
                if(mx &gt;= xoff +32 and mx &lt; xoff +32 +128 and my &gt;= yoff +64 and my &lt; yoff +96)
                {
                    keyboard_string = connect_port;
                    editing = "connect_port";
                }
                
                //connettiti
                var yoff = display_get_gui_height() -128;
                var xoff = screen_x_start +32 +256 +128;
                var xofff = xoff +32 +128 +96;
                if(mx &gt;= xofff +32 and mx &lt; xofff +32 +256 and my &gt;= yoff +64 and my &lt; yoff +96)
                {
                    //controllo correttezza dati
                    if(string_length(connect_ip) == 0)
                        ds_list_add(global.mex_error, "Indirizzo IP non valido.");
                    if(string_length(connect_port) == 0)
                        ds_list_add(global.mex_error, "La Porta deve essere almeno di una cifra.");
                    if(string_length(string_digits(connect_port)) != string_length(connect_port))
                    {
                       ds_list_add(global.mex_error, "Porta non valida, deve essere composta da soli numeri.");
                    }
                    else
                    {
                        var port_real = real(connect_port);
                        if(port_real &lt; 0 or port_real &gt; 65535)
                            ds_list_add(global.mex_error, "Porta non valida (0-65535).");
                    }
                    
                    //se non ci sono errori continua
                    if(ds_list_size(global.mex_error) == 0)
                    {
                        //rendo le impostazioni del server globali
                        global.server = false;
                        global.connect_ip = connect_ip;
                        global.connect_port = real(connect_port);
                        
                        //invio dati ad altervista
                        //e ottengo i dati per andare nella mappa corretta
                        //da fare
                        //-----------
                        
                        //vai alla mappa corretta
                        room_goto(rm_run_map1);
                    }
                    else
                    {
                        instance_create(0, 0, obj_menu_err);
                    }
                }
            }
            break;
        //ospita partita
        case 1:
            //solo se finita la transizione
            if(open_menu_w == open_menu_w_end)
            {
                //nome stanza
                var yoff = 32;
                if(mx &gt;= screen_x_start +32 and mx &lt; screen_x_start +32 +256 and my &gt;= screen_y_start +yoff +32 and my &lt; screen_y_start +yoff +64)
                {
                    keyboard_string = server_name;
                    editing = "server_name";
                }
                //password
                var yoff = 128;
                if(mx &gt;= screen_x_start +32 and mx &lt; screen_x_start +32 +256 and my &gt;= screen_y_start +yoff +32 and my &lt; screen_y_start +yoff +64)
                {
                    keyboard_string = server_pass;
                    editing = "server_pass";
                }
                //porta
                var yoff = 32;
                var xcenter = open_menu_w_end -32 -128;
                if(mx &gt;= xcenter -128 and mx &lt; xcenter +128 and my &gt;= screen_y_start +yoff +32 and my &lt; screen_y_start +yoff +64)
                {
                    keyboard_string = server_port;
                    editing = "server_port";
                }
                //avvia partita
                var yoff = 224;
                var xcenter = open_menu_w_end -32 -128;
                if(mx &gt;= xcenter -128 and mx &lt; xcenter +128 and my &gt;= screen_y_start +yoff +32 and my &lt; screen_y_start +yoff +64)
                {
                    //controllo correttezza dati
                    if(string_length(server_name) == 0)
                        ds_list_add(global.mex_error, "Il Nome Stanza deve essere almeno di un carattere.");
                    if(server_mode != 0)
                    {
                        var s = "Modalita' '" + modes[server_mode] + "' non ancora disponibile.";
                        ds_list_add(global.mex_error, s);
                    }
                    if(string_length(server_port) == 0)
                        ds_list_add(global.mex_error, "La Porta deve essere almeno di una cifra.");
                    if(string_length(string_digits(server_port)) != string_length(server_port))
                    {
                       ds_list_add(global.mex_error, "Porta non valida, deve essere composta da soli numeri.");
                    }
                    else
                    {
                        var port_real = real(server_port);
                        if(port_real &lt; 0 or port_real &gt; 65535)
                            ds_list_add(global.mex_error, "Porta non valida (0-65535).");
                    }
                    
                    //se non ci sono errori continua
                    if(ds_list_size(global.mex_error) == 0)
                    {
                        //rendo le impostazioni del server globali
                        global.server = true;
                        global.server_name = server_name;
                        global.server_pass = server_pass;
                        global.server_numpl = server_numpl;
                        global.server_mode = server_mode;
                        global.server_track = server_track;
                        global.server_port = real(server_port);
                        global.server_lan = server_lan;
                        
                        //invio dati ad altervista
                        //da fare
                        //-----------
                        
                        //vai alla mappa corretta
                        room_goto(scr_get_track());
                    }
                    else
                    {
                        instance_create(0, 0, obj_menu_err);
                    }
                }
            }
            break;
        case 2:
            break;
        case 3:
            //solo se finita la transizione
            if(open_menu_w == open_menu_w_end)
            {
                //nickname
                var yoff = 32;
                if(mx &gt;= screen_x_start +32 and mx &lt; screen_x_start +32 +256 and my &gt;= screen_y_start +yoff +32 and my &lt; screen_y_start +yoff +64)
                {
                    keyboard_string = global.nickname;
                    editing = "nickname";
                }
            }
            break;
    }
}

//aggiorno la variabile del testo
switch(editing)
{
    //trova partita
    case "connect_ip":
        if(string_length(keyboard_string) &lt;= 15)
            connect_ip = keyboard_string;
        else
            keyboard_string = string_copy(connect_ip, 1, 15);
        break;
    case "connect_port":
        if(string_length(keyboard_string) &lt;= 5)
            connect_port = keyboard_string;
        else
            keyboard_string = string_copy(connect_port, 1, 5);
        break;
    //ospita partita
    case "server_name":
        if(string_length(keyboard_string) &lt; 15)
            server_name = keyboard_string;
        else
            keyboard_string = string_copy(server_name, 1, 15);
        break;
    case "server_pass":
        if(string_length(keyboard_string) &lt; 15)
            server_pass = keyboard_string;
        else
            keyboard_string = string_copy(server_pass, 1, 15);
        break;
    case "server_port":
        if(string_length(keyboard_string) &lt;= 5)
            server_port = keyboard_string;
        else
            keyboard_string = string_copy(server_port, 1, 5);
        break;
    //allenamento
    case "nickname":
        if(string_length(keyboard_string) &lt; 15)
            global.nickname = keyboard_string;
        else
            keyboard_string = string_copy(global.nickname, 1, 15);
        break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GESTIONE EVENTI CLICK
switch(global.wut)
{
    case "left_numpl":
        if(server_numpl &gt; 0)
            server_numpl--;
        break;
    case "right_numpl":
        if(server_numpl &lt; 9)
            server_numpl++;
        break;
    case "left_mode":
        if(server_mode &gt; 0)
        {
            server_mode--;
            server_track = 0;
        }
        break;
    case "right_mode":
        if(server_mode &lt; array_length_1d(modes)-1)
        {
            server_mode++;
            server_track = 0;
        }
        break;
    case "left_track":
        if(server_track &gt; 0)
            server_track--;
        break;
    case "right_track":
        if(server_track &lt; array_length_2d(tracks, server_mode)-1)
            server_track++;
        break;
    case "checkbox_lan":
        server_lan = !server_lan;
        break;
}

global.wut = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW MENU
//palette
col_dbrown = make_colour_rgb(57,0,0);
col_ored = make_colour_rgb(154,36,0);
col_sand = make_colour_rgb(208,157,65);
col_lgreen = make_colour_rgb(148,178,124);
col_sky = make_colour_rgb(151,209,185);

col_pal_two[0] = make_colour_rgb(97,124,115);   //sailor's blue
col_pal_two[1] = make_colour_rgb(236,197,102);  //butter
col_pal_two[2] = make_colour_rgb(254,142,44);   //orange
col_pal_two[3] = make_colour_rgb(254,142,44);   //earth
col_pal_two[4] = make_colour_rgb(37,12,7);      //qblack

//sfondo
draw_set_colour(col_pal_two[4]);
draw_rectangle(0, 0, display_get_gui_width(), display_get_gui_height(), false);

draw_set_colour(col_pal_two[0]);
draw_text(16, 16, "cur_pos: " + string(cur_pos));

for(var i=0; i&lt;array_length_1d(entry_text); i++)
{
    //draw entry rect
    if(mx &gt;= 0 and mx &lt; 256 and my &gt;= yoffset +32*i and my &lt; yoffset +32*(i+1) or cur_pos == i)
    {
        draw_set_colour(col_pal_two[2]);
        draw_rectangle(0, yoffset +32*i, 256, yoffset +32*(i+1), false);
        //setto il colore per la scritta
        draw_set_colour(col_pal_two[4]);
    }
    else
    {
        //setto il colore per la scritta
        draw_set_colour(col_pal_two[2]);
    }
    //draw entry text
    draw_set_font(fnt_inc);
    draw_text(xoffset, yoffset +32*i, entry_text[i]);
}

switch(cur_pos)
{
    //trova partita
    case 0:
        //disegna rettangolo di base
        draw_set_colour(col_pal_two[2]);
        draw_rectangle(screen_x_start, screen_y_start, open_menu_w, open_menu_w_end, false);
        
        //solo se finita la transizione disegna il resto
        if(open_menu_w == open_menu_w_end)
        {
            draw_set_colour(col_pal_two[0]);
            draw_set_halign(fa_center);
            
            var diff = open_menu_w_end - screen_x_start;
            var len_find_text = array_length_1d(find_text);
            var toff = diff/len_find_text/2;
            for(var i=0; i&lt;len_find_text; i++)
            {
                draw_text(screen_x_start +toff +diff/len_find_text*i, screen_y_start +32, find_text[i]);
            }
            
            //connessione diretta
            //ip
            var yoff = display_get_gui_height() -128;
            var str_ip = "Connessione diretta (IP)";
            draw_set_halign(fa_left);
            draw_set_colour(col_pal_two[0]);
            draw_text(screen_x_start +32, yoff, str_ip);
            draw_rectangle(screen_x_start +32, yoff +64, screen_x_start +32 +256, yoff +96, false);
            draw_set_halign(fa_center);
            draw_set_colour(col_pal_two[4]);
            var ci = string_replace_all(connect_ip, "#", "\#");
            if(editing == "connect_ip")
                draw_text(screen_x_start +32 +128, yoff +64, ci + cursor);
            else
                draw_text(screen_x_start +32 +128, yoff +64, ci);
            //porta
            var xoff = screen_x_start +32 +256 +128;//string_length(str_ip)*16;
            var str_port = "Porta";
            draw_set_halign(fa_left);
            draw_set_colour(col_pal_two[0]);
            draw_text(xoff +32, yoff, str_port);
            draw_rectangle(xoff +32, yoff +64, xoff +32 +128, yoff +96, false);
            draw_set_halign(fa_center);
            draw_set_colour(col_pal_two[4]);
            var cp = string_replace_all(connect_port, "#", "\#");
            if(editing == "connect_port")
                draw_text(xoff +32 +64, yoff +64, cp + cursor);
            else
                draw_text(xoff +32 +64, yoff +64, cp);
            //connettiti
            var xofff = xoff +32 +128 +96;
            draw_set_halign(fa_center);
            if(mx &gt;= xofff +32 and mx &lt; xofff +32 +256 and my &gt;= yoff +64 and my &lt; yoff +96)
            {
                draw_set_colour(col_pal_two[4]);
                draw_rectangle(xofff +32, yoff +64, xofff +32 +256, yoff +96, false);
                draw_set_colour(col_pal_two[2]);
                draw_text(xofff +32 +128, yoff +64, "Connettiti &gt;");
            }
            else
            {
                draw_set_colour(col_pal_two[0]);
                draw_rectangle(xofff +32, yoff +64, xofff +32 +256, yoff +96, false);
                draw_set_colour(col_pal_two[4]);
                draw_text(xofff +32 +128, yoff +64, "Connettiti &gt;");
            }
        }
        
        draw_set_halign(fa_left);
        break;
    //ospita partita
    case 1:
        //disegna rettangolo di base
        draw_set_colour(col_pal_two[2]);
        draw_rectangle(screen_x_start, screen_y_start, open_menu_w, open_menu_w_end, false);
        
        //solo se finita la transizione disegna il resto
        if(open_menu_w == open_menu_w_end)
        {
            draw_set_halign(fa_center);
            
            //LATO SINISTRO
            //nome stanza
            draw_set_colour(col_pal_two[0]);
            var yoff = 32;
            draw_text(screen_x_start +32 +128, screen_y_start +yoff, "Nome Stanza");
            draw_rectangle(screen_x_start +32, screen_y_start +yoff +32, screen_x_start +32 +256, screen_y_start +yoff +64, false);
            draw_set_colour(col_pal_two[4]);
            var sn = string_replace_all(server_name, "#", "\#");
            if(editing == "server_name")
                draw_text(screen_x_start +32 +128, screen_y_start +yoff +32, string(sn) + cursor);
            else
                draw_text(screen_x_start +32 +128, screen_y_start +yoff +32, string(sn));
            //password
            draw_set_colour(col_pal_two[0]);
            var yoff = 128;
            draw_text(screen_x_start +32 +128, screen_y_start +yoff, "Password");
            draw_rectangle(screen_x_start +32, screen_y_start +yoff +32, screen_x_start +32 +256, screen_y_start +yoff +64, false);
            draw_set_colour(col_pal_two[4]);
            var sp = string_replace_all(server_pass, "#", "\#");
            if(editing == "server_pass")
                draw_text(screen_x_start +32 +128, screen_y_start +yoff +32, string_repeat("*", string_length(sp)) + cursor);
            else
                draw_text(screen_x_start +32 +128, screen_y_start +yoff +32, string_repeat("*", string_length(sp)));
            //numero giocatori
            draw_set_colour(col_pal_two[0]);
            var yoff = 224;
            draw_text(screen_x_start +32 +128, screen_y_start +yoff, "Numero Giocatori");
            //if(!instance_exists(obj_left)) instance_create(screen_x_start +32, screen_y_start +yoff, obj_left);
            //if(!instance_exists(obj_left)) instance_create(screen_x_start +224, screen_y_start +yoff, obj_right);
            draw_rectangle(screen_x_start +128, screen_y_start +yoff +32, screen_x_start +192, screen_y_start +yoff +64, false);
            draw_set_colour(col_pal_two[4]);
            draw_text(screen_x_start +32 +128, screen_y_start +yoff +32, string(server_numpl));
            
            //CENTRO
            //modalità
            var yoff = 32;
            draw_set_colour(col_pal_two[0]);
            var xcenter = open_menu_w_start + (open_menu_w_end - open_menu_w_start)/2;
            draw_text(xcenter, screen_y_start +yoff, "Modalita'");
            draw_rectangle(xcenter -64, screen_y_start +yoff +32, xcenter +64, screen_y_start +yoff +64, false);
            draw_set_colour(col_pal_two[4]);
            draw_text(xcenter, screen_y_start +yoff +32, string(modes[server_mode]));
            //percorso
            var yoff = 128;
            draw_set_colour(col_pal_two[0]);
            draw_text(xcenter, screen_y_start +yoff, "Percorso");
            draw_rectangle(xcenter -128, screen_y_start +yoff +32, xcenter +128, screen_y_start +yoff +288, false);
            draw_rectangle(xcenter -64, screen_y_start +yoff +320, xcenter +64, screen_y_start +yoff +354, false);
            draw_set_colour(col_pal_two[4]);
            draw_text(xcenter, screen_y_start +yoff +320, string(tracks[server_mode, server_track]));
            
            //LATO DESTRO
            //porta
            var yoff = 32;
            draw_set_colour(col_pal_two[0]);
            var xcenter = open_menu_w_end -32 -128;
            draw_text(xcenter, screen_y_start +yoff, "Porta Server");
            draw_rectangle(xcenter -128, screen_y_start +yoff +32, xcenter +128, screen_y_start +yoff +64, false);
            draw_set_colour(col_pal_two[4]);
            var spo = string_replace_all(server_port, "#", "\#");
            if(editing == "server_port")
                draw_text(xcenter, screen_y_start +yoff +32, string(spo) + cursor);
            else
                draw_text(xcenter, screen_y_start +yoff +32, string(spo));
            //LAN
            var yoff = 128;
            draw_set_colour(col_pal_two[0]);
            draw_text(xcenter, screen_y_start +yoff, "LAN");
            //avvia partita
            var yoff = 224;
            if(mx &gt;= xcenter -128 and mx &lt; xcenter +128 and my &gt;= screen_y_start +yoff +32 and my &lt; screen_y_start +yoff +64)
            {
                draw_set_colour(col_pal_two[4]);
                draw_rectangle(xcenter -128, screen_y_start +yoff +32, xcenter +128, screen_y_start +yoff +64, false);
                draw_set_colour(col_pal_two[2]);
                draw_text(xcenter, screen_y_start +yoff +32, "Avvia Partita &gt;");
            }
            else
            {
                draw_set_colour(col_pal_two[0]);
                draw_rectangle(xcenter -128, screen_y_start +yoff +32, xcenter +128, screen_y_start +yoff +64, false);
                draw_set_colour(col_pal_two[4]);
                draw_text(xcenter, screen_y_start +yoff +32, "Avvia Partita &gt;");
            }
            
        }
        
        draw_set_halign(fa_left);
        break;
    //allenamento
    case 2:
        //disegna rettangolo di base
        draw_set_colour(col_pal_two[2]);
        draw_rectangle(256, 256, open_menu_w, open_menu_w_end, false);
        
        //solo se finita la transizione disegna il resto
        
        
        break;
    //opzioni
    case 3:
        //disegna rettangolo di base
        draw_set_colour(col_pal_two[2]);
        draw_rectangle(256, 256, open_menu_w, open_menu_w_end, false);
        
        //solo se finita la transizione disegna il resto
        if(open_menu_w == open_menu_w_end)
        {
            draw_set_halign(fa_center);
            
            //LATO SINISTRO
            //nome stanza
            draw_set_colour(col_pal_two[0]);
            var yoff = 32;
            draw_text(screen_x_start +32 +128, screen_y_start +yoff, "Nome Giocatore");
            draw_rectangle(screen_x_start +32, screen_y_start +yoff +32, screen_x_start +32 +256, screen_y_start +yoff +64, false);
            draw_set_colour(col_pal_two[4]);
            var nn = string_replace_all(global.nickname, "#", "\#");
            if(editing == "nickname")
                draw_text(screen_x_start +32 +128, screen_y_start +yoff +32, string(nn) + cursor);
            else
                draw_text(screen_x_start +32 +128, screen_y_start +yoff +32, string(nn));
        }
        
        draw_set_halign(fa_left);
        break;
    //crediti
    case 4:
        //disegna rettangolo di base
        draw_set_colour(col_pal_two[2]);
        draw_rectangle(256, 256, open_menu_w, open_menu_w_end, false);
        
        //solo se finita la transizione disegna il resto
        if(open_menu_w == open_menu_w_end)
        {
            draw_set_colour(col_pal_two[0]);
            draw_set_halign(fa_center);
            
            var diff = open_menu_w_end - 256;
            var toff = diff/2;
            draw_text(256 +toff, 256 +32, credits_text);
        }
        
        draw_set_halign(fa_left);
        break;
    //esci
    case 5:
        //nulla perchè esce
        break;
    
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
