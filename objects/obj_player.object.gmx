<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///VARIABILI DEL GIOCATORE

//posizione iniziale
//x = 0;    //posizione x corrente
//y = 0;    //posizione y corrente
z = 0;      //posizione z corrente
zhigh = 16; //altezza personaggio
xnew = 0;   //x successiva in base alla velocità e direzione
ynew = 0;   //y successiva in base alla velocità e direzione
zgravity = 1;   //valore della gravità sull'asse z
zspeed = 0;     //velocità attuale sull'asse z

//camera
camx = 0;   //posizione x dove guarda la camera
camy = 0;   //posizione y dove guarda la camera
camz = 0;   //posizione z dove guarda la camera

//direzione
direction = 0;  //direzione laterale dove guarda la camera
zdirection = 0; //direzione verticale dove guarda la camera

//velocità
max_speed = 8;  //velocità massima
cur_speed = 0;  //velocità corrente (avanti e indietro)
str_speed = 0;  //velocità corrente (laterale)
inc_speed = 1;  //incremento velocità

window_set_cursor(cr_none);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVE CAMERA
direction += ((display_get_width()/2) -display_mouse_get_x()) * 0.2;
zdirection += ((display_get_height()/2) -display_mouse_get_y()) * 0.2;
if(zdirection &gt; 85) zdirection = 85;
if(zdirection &lt; -85) zdirection = -85;
display_mouse_set(display_get_width()/2, display_get_height()/2);

camx = x + lengthdir_x(128, direction);
camy = y + lengthdir_y(128, direction);
camz = 10 + zdirection;

/*camx = x + cos(degtorad(direction));
camy = y - sin(degtorad(direction));
camz = z + tan(degtorad(zdirection));*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVIMENTI lezzi
xnew = 0;
ynew = 0;

if(keyboard_check(ord("W")))
{
    if(cur_speed &lt; max_speed) cur_speed += inc_speed;
    xnew += lengthdir_x(cur_speed, direction);
    ynew += lengthdir_y(cur_speed, direction);
}
if(keyboard_check(ord("S")))
{
    if(cur_speed &gt; -max_speed) cur_speed -= inc_speed;
    xnew += lengthdir_x(cur_speed, direction);
    ynew += lengthdir_y(cur_speed, direction);
}
if(keyboard_check(ord("A")))
{
    if(str_speed &lt; max_speed/2) str_speed += inc_speed;
    xnew += lengthdir_x(str_speed, direction +90);
    ynew += lengthdir_y(str_speed, direction +90);
}
if(keyboard_check(ord("D")))
{
    if(str_speed &gt; -max_speed/2) str_speed -= inc_speed;
    xnew += lengthdir_x(str_speed, direction +90); //-90
    ynew += lengthdir_y(str_speed, direction +90); //-90
}
if(!keyboard_check(ord("W")) and !keyboard_check(ord("S")))
{
    //friction
    if(cur_speed &gt; 0) cur_speed -= inc_speed;
    else if(cur_speed &lt; 0) cur_speed += 0.5;
    else cur_speed = 0;
    xnew += lengthdir_x(cur_speed, direction);
    ynew += lengthdir_y(cur_speed, direction);
}
if(!keyboard_check(ord("A")) and !keyboard_check(ord("D")))
{
    //friction
    if(str_speed &gt; 0) str_speed -= inc_speed;
    else if(str_speed &lt; 0) str_speed += 0.5;
    else str_speed = 0;
    xnew += lengthdir_x(str_speed, direction +90);
    ynew += lengthdir_y(str_speed, direction +90);
}

//xnew e ynew vengono utilizzate nello script COLLISIONI
/*if(instance_place(x +xnew, y +ynew, obj_wall) == noone)
{
    x += xnew;
    y += ynew;
}*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SALTO e COLLISIONI
//collisioni laterali
/*var nocoll = true;
for(var i=0; i&lt;instance_number(obj_wall); i++)
{
    var curid = instance_find(obj_wall, i);
    var coll = place_meeting(x +xnew, y +ynew, curid);
    if(coll and (curid.z &gt; z +zhigh or curid.z +curid.zhigh &lt; z))
    {
        //c'è almeno un blocco che mi fa collidere
        nocoll = false;
        break;
    }
}
//mi muovo solo se non collido
if(nocoll)
{
    x += xnew;
    y += ynew;
}*/

//gravità
/*
var nearid = noone; //blocco con cui potrei collidere sotto di me
var zmax = 0;       //altezza del blocco con cui potrei collidere
for(var i=0; i&lt;instance_number(obj_wall); i++)
{
    var curid = instance_find(obj_wall, i);
    if(place_meeting(xnew, ynew, curid) and curid.z +curid.zhigh &lt; z and curid.z +curid.zhigh &gt; zmax)
    {
        nearid = curid;
        zmax = curid.z +curid.zhigh;
    }
}

zspeed -= zgravity;
z += zspeed;
if(z &lt; zmax)
{
    z = zmax;
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CAMERA
//d3d_set_projection(x, y, 10 +z, xt, yt, 10 +zt, 0, 0, 1);
d3d_set_projection(x, y, z +zhigh, camx, camy, camz +zhigh, 0, 0, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
